name: Main workflow

env:
  PKG_NAME: pash-annotations
  PKG_NAME_WHEEL: pash_annotations

on:
  pull_request:
  push:
  schedule:
    - cron: '5 14 * * *'      

jobs:
  package-python:
    strategy:
      fail-fast: false
      # TODO: Don't think we need to build in macos too
      matrix:
        os:
          # - macos-11
          - ubuntu-latest
        ## There should be only one python version here
        python-version: 
          - "3.8"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upgrade pip and build
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade build

      - name: Build wheel
        run: python3 -m build
            
      - name: Upload binary wheel
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./dist/*.whl


      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ matrix.python-version }}
      
      # - name: Install build
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install build
      #     if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Build project
      #   run: |
      #     python -m build

      # - name: Upload binary wheel
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ format('bdist.{0}', matrix.python-version) }}
      #     path: ${{ format('dist/{0}-*.whl', env.PKG_NAME_WHEEL) }}
            
      # - name: Upload source distribution (from Linux)
      #   uses: actions/upload-artifact@v4
      #   if: contains(matrix.python-version, '3.8')
      #   with:
      #     name: sdist
      #     path: ${{ format('dist/{0}-*.tar.gz', env.PKG_NAME) }}
      
  build-and-test:
    strategy:
      fail-fast: true
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        python-version: ["3.8", "3.9", "3.10"]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
 
      # we don't reuse the wheels so that all of the CI runs can happen concurrently
      - name: Install AnnotationLibrary directly
        run: sudo python setup.py install
      
      - name: Install pytest
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Test Annotation Library
        run: |
          pytest          



  deploy:
    needs:
      - package-python
      - build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
      
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4

      # - name: Rename distributions
      #   run: |
      #     mkdir dist
      #     ls bdist.*/
      #     mv bdist.*/${PKG_NAME_WHEEL}-*.whl dist/
      #     mv sdist/${PKG_NAME}-*.tar.gz dist/
      #     echo Look on my Works, ye Mighty, and despair!
      #     ls dist
  
      ## TODO: Fix this!
      # - name: Deploy 'latest' release on GH
      #   uses: marvinpinto/action-automatic-releases@latest
      #   with:
      #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
      #     automatic_release_tag: "latest"
      #     prerelease: true
      #     title: "Python source and binary distributions"
      #     files: |
      #       dist/*

      # - name: Deploy test distribution to Test PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     verbose: true
      #     repository_url: https://test.pypi.org/legacy/
      #     skip_existing: true            
              
      # - name: Deploy tagged release on PyPI
      #   if: startsWith(github.ref, 'refs/tags')
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     verbose: true

      - name: Deploy test distribution to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          verbose: true
          repository_url: https://test.pypi.org/legacy/
          skip_existing: true            
              
      - name: Deploy tagged release on PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
